name: Build Release

on:
  schedule:
    - cron: '*/5 * * * *'
  # workflow_dispatch:

  # push:
  #   # Any git tag starts with `v` be pushed to the repo will trigger this workflow
  #   # ex: `git push origin v1.0` or `git push origin v2.6.6`
  #   tags:
  #     - v*
  #   branches:
  #     - devel

jobs:
  check_date:
    runs-on: ubuntu-20.04
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}
      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="1 hours"  ${{ github.sha }}) &amp;&amp; echo "::set-output name=should_run::false"

  simply-pull:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
           submodules: recursive

      - name: step2
        run: echo 'hihi'

      - name: Set variables
        id: vars
        run: |
            echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
            datetime=$(echo ${{ github.event.repository.updated_at}} | sed 's/:/./g')
            echo "::set-output name=datetime::${datetime}"

      - name: Create component tag, based on devel branch or tag
        run: |
            tag="${GITHUB_REF/refs\/tags\//}"
            echo $tag
            echo ${tag}
            if [[ $tag == v* ]]; then
              echo "TAG=${tag:1}" >> $GITHUB_ENV
            else
              echo 'The release tag is empty, going to use devel branch to create tag name'
              # branch_name=${GITHUB_REF_NAME}
              #tag="devel-${{ steps.vars.outputs.sha_short }}-${{ steps.vars.outputs.datetime }}"
              BURRO_VERSION=$(sed -n "/BURRO_VERSION=/p"  version.txt | cut -d '=' -f 2-)
              tag="$BURRO_VERSION-devel-${{ steps.vars.outputs.sha_short }}"
              echo "${tag}"
              echo "$tag"
              echo "TAG=${tag}" >> $GITHUB_ENV
            fi

            # replace all occurence of '-' with '.' so greengrass components could be created
            component_tag=$(echo "${tag}" | tr '-' '.')
            
            if [[ $tag == v* ]]; then
               echo "COMPONENT_TAG=${component_tag:1}" >> $GITHUB_ENV
            else
               echo "COMPONENT_TAG=${component_tag}" >> $GITHUB_ENV
            fi
               
      - name: shout out tags
        shell: bash
        env:
            tag: ${{ env.TAG }}
        run: |
            echo "tag is : $tag"

      - name: Replace the version tag in version.txt with git tag suffix
        run: |
            TAG_VERSION=$( cut -d '-' -f 1 <<< "${{ env.TAG }}" )
            TAG_SUFFIX=$( cut -d '-' -f 2- <<< "${{ env.TAG }}" )

            # extract version after BURRO_VERSION
            BURRO_VERSION=$(sed -n "/BURRO_VERSION=/p"  version.txt | cut -d '=' -f 2-)
            echo "BURRO_VERSION=${BURRO_VERSION}" >> $GITHUB_ENV
            echo "BURRO_VERSION from the version.txt : $BURRO_VERSION"
            echo "TAG_VERSION from git tag : $TAG_VERSION"
            echo "TAG_SUFFIX from git tag : $TAG_SUFFIX"
            if [[ $TAG_VERSION == 'devel' ]]; then
              sed -i "/^export BURRO_VERSION_TAG=/c\export BURRO_VERSION_TAG=${{ env.TAG }}" version.txt
            else
               [[ "$BURRO_VERSION" != "$TAG_VERSION"  ]] && echo "ERROR: $BURRO_VERSION is not same as $TAG_VERSION" && exit 1
               sed -i "/^export BURRO_VERSION_TAG=/c\export BURRO_VERSION_TAG=$TAG_SUFFIX" version.txt
            fi

            # every line begins with the 'export BURRO_VERSION_TAG=' will be replaced with 'export BURRO_VERSION_TAG=$TAG_SUFFIX'
            # sed -i "/^export BURRO_VERSION_TAG=/c\export BURRO_VERSION_TAG=$TAG_SUFFIX" version.txt
      
      - name: show the content of the version.txt
        run: cat version.txt

      - name: check all global variables
        run: |
             echo "COMPONENT_TAG = ${{ env.COMPONENT_TAG }}"
             echo "TAG = ${{ env.TAG }}"
